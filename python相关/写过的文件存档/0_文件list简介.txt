1.这两个文件都是控制机械臂末端进行笛卡尔运动规划的py，并且包含waypoint。

2.该文件是控制机械臂各Link到达指定角度（弧度）姿态的py。
  0_项目文件中的3_reconstructed_excavator_control.py文件，其中的data_transfer和excavator_joint_waypoints_command两个函数，可以将csv文件中的一系列joint_positions点，在Moveit中执行出来。
  后来又加入了角度与弧度之间的转化，简化规划步骤。

3.这两个文件，分别可以从gazebo/link_states和gazebo/model_states中获取实时信息，并写入json文件中，方便之后作图。注意修改文件中读取和写入的文件位置！

4.该文件是前面两个文件的升级版，可以直接获取多个类型数据，并按顺序最终写入csv文件中，相当于把文件copy到matlab中，可以一键作图。
注意！！该方式对于行数大于3600行左右的数据时，不太适用，可能会爆内存导致数据存不进来！！

5.该文件用于导航时，实时发布模型初始位置。好像并没什么用。。。

6.该文件可以获取/cmd_vel的数据，并通过计算换算成四个麦克纳姆轮的速度（包含方向）。

7.该文件是/gazebo/set_model_state话题的使用方法，实际应用见8。

8.该文件可以暂时解决模型使用libgazebo_ros_planner_move.so时，在旋转时模型起飞的问题。。。有点投机取巧，不过挺实用。

9.该文件是使用/gazebo/spawn_sdf_model这个rosservice的范例，可以在一个位置逐渐生成多个同样的模型。

10.该文件用来统计model中，处于某一个位置范围的模型的数量，并在最开始和区域内数量变化时，刷新显示的数据。使用时，注意数字6是非同类的模型的数目，具体还需要根据实际情况来改变。

11.该文件是针对挖掘机的Links计算的运动学求解，可以部分解决URDF模型无法建立闭环模型的问题，如果后续还需要更精细，还需要求解模型末端的速度和加速度，并通过代码转换。

12.该文件用于测试机器人能否到达导航目标点。
